{"ast":null,"code":"var _jsxFileName = \"/Users/marioprada/Documents/dev/visx-test/pages/index.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { letterFrequency } from '@visx/mock-data';\nimport { Group } from '@visx/group';\nimport { Bar } from '@visx/shape';\nimport { scaleLinear, scaleBand } from '@visx/scale'; // We'll use some mock data from `@visx/mock-data` for this.\n\nconst data = letterFrequency; // Define the graph dimensions and margins\n\nconst width = 1000;\nconst height = 1000;\nconst margin = {\n  top: 20,\n  bottom: 20,\n  left: 20,\n  right: 20\n}; // Then we'll create some bounds\n\nconst xMax = width - margin.left - margin.right;\nconst yMax = height - margin.top - margin.bottom; // We'll make some helpers to get at the data we want\n\nconst x = d => d.letter;\n\nconst y = d => +d.frequency * 100; // And then scale the graph by our data\n\n\nconst xScale = scaleBand({\n  range: [0, xMax],\n  round: true,\n  domain: data.map(x),\n  padding: 0.4\n});\nconst yScale = scaleLinear({\n  range: [yMax, 0],\n  round: true,\n  domain: [0, Math.max(...data.map(y))]\n}); // Compose together the scale and accessor functions to get point functions\n\nconst compose = (scale, accessor) => data => scale(accessor(data));\n\nconst xPoint = compose(xScale, x);\nconst yPoint = compose(yScale, y); // Finally we'll embed it all in an SVG\n\nconst BarGraph = props => {\n  return __jsx(\"svg\", {\n    width: width,\n    height: height,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, data.map((d, i) => {\n    const barHeight = yMax - yPoint(d);\n    return __jsx(Group, {\n      key: `bar-${i}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }\n    }, __jsx(Bar, {\n      x: xPoint(d),\n      y: yMax - barHeight,\n      height: barHeight,\n      width: xScale.bandwidth(),\n      fill: \"#fc2e1c\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }\n    }));\n  }));\n};\n\nexport default BarGraph;","map":{"version":3,"sources":["/Users/marioprada/Documents/dev/visx-test/pages/index.js"],"names":["React","letterFrequency","Group","Bar","scaleLinear","scaleBand","data","width","height","margin","top","bottom","left","right","xMax","yMax","x","d","letter","y","frequency","xScale","range","round","domain","map","padding","yScale","Math","max","compose","scale","accessor","xPoint","yPoint","BarGraph","props","i","barHeight","bandwidth"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,iBAAhC;AACA,SAASC,KAAT,QAAsB,aAAtB;AACA,SAASC,GAAT,QAAoB,aAApB;AACA,SAASC,WAAT,EAAsBC,SAAtB,QAAuC,aAAvC,C,CAEA;;AACA,MAAMC,IAAI,GAAGL,eAAb,C,CAEA;;AACA,MAAMM,KAAK,GAAG,IAAd;AACA,MAAMC,MAAM,GAAG,IAAf;AACA,MAAMC,MAAM,GAAG;AAAEC,EAAAA,GAAG,EAAE,EAAP;AAAWC,EAAAA,MAAM,EAAE,EAAnB;AAAuBC,EAAAA,IAAI,EAAE,EAA7B;AAAiCC,EAAAA,KAAK,EAAE;AAAxC,CAAf,C,CAEA;;AACA,MAAMC,IAAI,GAAGP,KAAK,GAAGE,MAAM,CAACG,IAAf,GAAsBH,MAAM,CAACI,KAA1C;AACA,MAAME,IAAI,GAAGP,MAAM,GAAGC,MAAM,CAACC,GAAhB,GAAsBD,MAAM,CAACE,MAA1C,C,CAEA;;AACA,MAAMK,CAAC,GAAIC,CAAD,IAAOA,CAAC,CAACC,MAAnB;;AACA,MAAMC,CAAC,GAAIF,CAAD,IAAO,CAACA,CAAC,CAACG,SAAH,GAAe,GAAhC,C,CAEA;;;AACA,MAAMC,MAAM,GAAGhB,SAAS,CAAC;AACvBiB,EAAAA,KAAK,EAAE,CAAC,CAAD,EAAIR,IAAJ,CADgB;AAEvBS,EAAAA,KAAK,EAAE,IAFgB;AAGvBC,EAAAA,MAAM,EAAElB,IAAI,CAACmB,GAAL,CAAST,CAAT,CAHe;AAIvBU,EAAAA,OAAO,EAAE;AAJc,CAAD,CAAxB;AAMA,MAAMC,MAAM,GAAGvB,WAAW,CAAC;AACzBkB,EAAAA,KAAK,EAAE,CAACP,IAAD,EAAO,CAAP,CADkB;AAEzBQ,EAAAA,KAAK,EAAE,IAFkB;AAGzBC,EAAAA,MAAM,EAAE,CAAC,CAAD,EAAII,IAAI,CAACC,GAAL,CAAS,GAAGvB,IAAI,CAACmB,GAAL,CAASN,CAAT,CAAZ,CAAJ;AAHiB,CAAD,CAA1B,C,CAMA;;AACA,MAAMW,OAAO,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAsB1B,IAAD,IAAUyB,KAAK,CAACC,QAAQ,CAAC1B,IAAD,CAAT,CAApD;;AACA,MAAM2B,MAAM,GAAGH,OAAO,CAACT,MAAD,EAASL,CAAT,CAAtB;AACA,MAAMkB,MAAM,GAAGJ,OAAO,CAACH,MAAD,EAASR,CAAT,CAAtB,C,CAEA;;AACA,MAAMgB,QAAQ,GAAIC,KAAD,IAAW;AAC1B,SACE;AAAK,IAAA,KAAK,EAAE7B,KAAZ;AAAmB,IAAA,MAAM,EAAEC,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,IAAI,CAACmB,GAAL,CAAS,CAACR,CAAD,EAAIoB,CAAJ,KAAU;AAClB,UAAMC,SAAS,GAAGvB,IAAI,GAAGmB,MAAM,CAACjB,CAAD,CAA/B;AACA,WACE,MAAC,KAAD;AAAO,MAAA,GAAG,EAAG,OAAMoB,CAAE,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,GAAD;AACE,MAAA,CAAC,EAAEJ,MAAM,CAAChB,CAAD,CADX;AAEE,MAAA,CAAC,EAAEF,IAAI,GAAGuB,SAFZ;AAGE,MAAA,MAAM,EAAEA,SAHV;AAIE,MAAA,KAAK,EAAEjB,MAAM,CAACkB,SAAP,EAJT;AAKE,MAAA,IAAI,EAAC,SALP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAWD,GAbA,CADH,CADF;AAkBD,CAnBD;;AAqBA,eAAeJ,QAAf","sourcesContent":["import React from 'react';\nimport { letterFrequency } from '@visx/mock-data';\nimport { Group } from '@visx/group';\nimport { Bar } from '@visx/shape';\nimport { scaleLinear, scaleBand } from '@visx/scale';\n\n// We'll use some mock data from `@visx/mock-data` for this.\nconst data = letterFrequency;\n\n// Define the graph dimensions and margins\nconst width = 1000;\nconst height = 1000;\nconst margin = { top: 20, bottom: 20, left: 20, right: 20 };\n\n// Then we'll create some bounds\nconst xMax = width - margin.left - margin.right;\nconst yMax = height - margin.top - margin.bottom;\n\n// We'll make some helpers to get at the data we want\nconst x = (d) => d.letter;\nconst y = (d) => +d.frequency * 100;\n\n// And then scale the graph by our data\nconst xScale = scaleBand({\n  range: [0, xMax],\n  round: true,\n  domain: data.map(x),\n  padding: 0.4,\n});\nconst yScale = scaleLinear({\n  range: [yMax, 0],\n  round: true,\n  domain: [0, Math.max(...data.map(y))],\n});\n\n// Compose together the scale and accessor functions to get point functions\nconst compose = (scale, accessor) => (data) => scale(accessor(data));\nconst xPoint = compose(xScale, x);\nconst yPoint = compose(yScale, y);\n\n// Finally we'll embed it all in an SVG\nconst BarGraph = (props) => {\n  return (\n    <svg width={width} height={height}>\n      {data.map((d, i) => {\n        const barHeight = yMax - yPoint(d);\n        return (\n          <Group key={`bar-${i}`}>\n            <Bar\n              x={xPoint(d)}\n              y={yMax - barHeight}\n              height={barHeight}\n              width={xScale.bandwidth()}\n              fill='#fc2e1c'\n            />\n          </Group>\n        );\n      })}\n    </svg>\n  );\n};\n\nexport default BarGraph;\n"]},"metadata":{},"sourceType":"module"}