{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/marioprada/Documents/dev/visx-test/pages/index.js\";\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { letterFrequency } from '@visx/mock-data';\nimport { Group } from '@visx/group';\nimport { Bar } from '@visx/shape';\nimport { scaleLinear, scaleBand, scaleOrdinal } from '@visx/scale';\nimport { schemeSet1 } from 'd3-scale-chromatic'; // We'll use some mock data from `@visx/mock-data` for this.\n\nvar data = letterFrequency; // Define the graph dimensions and margins\n\nvar width = 1000;\nvar height = 1000;\nvar margin = {\n  top: 50,\n  bottom: 50,\n  left: 50,\n  right: 50\n}; // Then we'll create some bounds\n\nvar xMax = width - margin.left - margin.right;\nvar yMax = height - margin.top - margin.bottom; // We'll make some helpers to get at the data we want\n\nvar x = function x(d) {\n  return d.letter;\n};\n\nvar y = function y(d) {\n  return +d.frequency * 100;\n}; // And then scale the graph by our data\n\n\nvar xScale = scaleBand({\n  range: [0, xMax],\n  round: true,\n  domain: data.map(x),\n  padding: 0.4\n});\nvar yScale = scaleLinear({\n  range: [yMax, 0],\n  round: true,\n  domain: [0, Math.max.apply(Math, _toConsumableArray(data.map(y)))]\n});\nvar colorScale = scaleOrdinal({\n  domain: data.map(x),\n  range: schemeSet1\n});\nconsole.log(colorScale); // Compose together the scale and accessor functions to get point functions\n\nvar compose = function compose(scale, accessor) {\n  return function (data) {\n    return scale(accessor(data));\n  };\n};\n\nvar xPoint = compose(xScale, x);\nvar yPoint = compose(yScale, y); // Finally we'll embed it all in an SVG\n\nvar BarGraph = function BarGraph(props) {\n  return __jsx(\"svg\", {\n    width: width,\n    height: height,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, data.map(function (d, i) {\n    var barHeight = yMax - yPoint(d);\n    return __jsx(Group, {\n      key: \"bar-\".concat(i),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }\n    }, __jsx(Bar, {\n      x: xPoint(d),\n      y: yMax - barHeight,\n      height: barHeight,\n      width: xScale.bandwidth(),\n      fill: colorScale(d),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }\n    }));\n  }));\n};\n\n_c = BarGraph;\nexport default BarGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"BarGraph\");","map":{"version":3,"sources":["/Users/marioprada/Documents/dev/visx-test/pages/index.js"],"names":["React","letterFrequency","Group","Bar","scaleLinear","scaleBand","scaleOrdinal","schemeSet1","data","width","height","margin","top","bottom","left","right","xMax","yMax","x","d","letter","y","frequency","xScale","range","round","domain","map","padding","yScale","Math","max","colorScale","console","log","compose","scale","accessor","xPoint","yPoint","BarGraph","props","i","barHeight","bandwidth"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { letterFrequency } from '@visx/mock-data';\nimport { Group } from '@visx/group';\nimport { Bar } from '@visx/shape';\nimport { scaleLinear, scaleBand, scaleOrdinal } from '@visx/scale';\n\nimport { schemeSet1 } from 'd3-scale-chromatic';\n\n// We'll use some mock data from `@visx/mock-data` for this.\nconst data = letterFrequency;\n\n// Define the graph dimensions and margins\nconst width = 1000;\nconst height = 1000;\nconst margin = { top: 50, bottom: 50, left: 50, right: 50 };\n\n// Then we'll create some bounds\nconst xMax = width - margin.left - margin.right;\nconst yMax = height - margin.top - margin.bottom;\n\n// We'll make some helpers to get at the data we want\nconst x = (d) => d.letter;\nconst y = (d) => +d.frequency * 100;\n\n// And then scale the graph by our data\nconst xScale = scaleBand({\n  range: [0, xMax],\n  round: true,\n  domain: data.map(x),\n  padding: 0.4,\n});\nconst yScale = scaleLinear({\n  range: [yMax, 0],\n  round: true,\n  domain: [0, Math.max(...data.map(y))],\n});\n\nconst colorScale = scaleOrdinal({\n  domain: data.map(x),\n  range: schemeSet1,\n});\n\nconsole.log(colorScale);\n\n// Compose together the scale and accessor functions to get point functions\nconst compose = (scale, accessor) => (data) => scale(accessor(data));\nconst xPoint = compose(xScale, x);\nconst yPoint = compose(yScale, y);\n\n// Finally we'll embed it all in an SVG\nconst BarGraph = (props) => {\n  return (\n    <svg width={width} height={height}>\n      {data.map((d, i) => {\n        const barHeight = yMax - yPoint(d);\n        return (\n          <Group key={`bar-${i}`}>\n            <Bar\n              x={xPoint(d)}\n              y={yMax - barHeight}\n              height={barHeight}\n              width={xScale.bandwidth()}\n              fill={colorScale(d)}\n            />\n          </Group>\n        );\n      })}\n    </svg>\n  );\n};\n\nexport default BarGraph;\n"]},"metadata":{},"sourceType":"module"}